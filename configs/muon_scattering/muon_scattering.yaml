---
##############
# Test config
#
# Detailed information on the parameters are given in the SetupManager
# class located in dnn_reco/setup_manager.py.
##############

# Provide a unique name for the model
'unique_name': 'muon_scattering'

#---------------------------
# General settings
#---------------------------
'training_data_file' : [

    # MuonGun - low
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/1/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/2/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/3/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/4/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/5/*.hdf5',

    # MuonGun - medium
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/1/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/2/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/3/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/4/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/5/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/6/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/7/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/8/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/9/*.hdf5',

    # MuonGun - high
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/1/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/2/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/3/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/4/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/5/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/6/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/7/*.hdf5',

  ]
'trafo_data_file' : [
    # MuonGun - low
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/*_energy/IC86_2013/l2/1/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/*_energy/IC86_2013/l2/2/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/*_energy/IC86_2013/l2/3/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/*_energy/IC86_2013/l2/4/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/*_energy/IC86_2013/l2/5/*.hdf5',

    # MuonGun - medium
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/6/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/7/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/8/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/9/*.hdf5',

    # MuonGun - high
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/6/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/7/*.hdf5',
  ]
'validation_data_file' : [

    # MuonGun
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/6/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/10/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/8/*.hdf5',

  ]
'test_data_file' : [

    # MuonGun
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/low_energy/IC86_2013/l2/6/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/medium_energy/IC86_2013/l2/10/*.hdf5',
    '/net/big-tank/POOL/users/mhuennefeld/data/dnn_reco/muon_scattering/MuonGun/high_energy/IC86_2013/l2/8/*.hdf5',
  ]

'tf_random_seed': 42
'float_precision': float32
'num_jobs' : 8
'file_capacity' : 1
'batch_capacity' : 200
'num_add_files' : 200
'num_repetitions' : 10
#'DOM_init_values' : [[[[[0., -0.020098502, -0.014917467, 0.057788417, 0.03707111, 0., 0.]]]]]
'batch_size' : 32

'log_path' : "../logs/\
                {unique_name}/\
                {model_file}__\
                {model_name}"

#----------------------
# Data Handler settings
#----------------------
# Name of data bin values key (e.g. DOMPulseBinValues, dnn_data_bin_values)
'data_handler_bin_values_name': dnn_data_bin_values
# Name of data bin indices key (e.g. DOMPulseBinIndices, dnn_data_bin_indices)
'data_handler_bin_indices_name': dnn_data_bin_indices
# Name of data global time offset key (e.g. DOMPulseTimeRangeStart, dnn_data_global_time_offset)
'data_handler_time_offset_name': dnn_data_global_time_offset

'data_handler_num_bins': 9
'data_handler_num_splits': 4

'data_handler_label_file': 'muon_scattering_labels'
'data_handler_label_name': 'muon_scattering'
'data_handler_misc_file': 'default_misc'
'data_handler_misc_name': 'general_misc_loader'
'data_handler_filter_file': 'default_filter'
'data_handler_filter_name': 'general_filter'


'data_handler_label_key': 'MCLabelsMuonScattering'


# must be a list of keys or empty list
'data_handler_relative_time_keys': []
# lower case pattern
'data_handler_relative_time_key_pattern': 'time'

# --------------
# Misc settings
# --------------
# The general_misc_loader will load the keys defined in the misc_load_dict
# from the training files. The pattern is: 'hdf key': 'column'
# or a list of columns: 'hdf key': ['column1', 'column2']
# These values will then be added to the misc values under the name:
#     'hdf key'_'column'
'misc_load_dict': {
  'MCLabelsMuonScattering': ['length', 'length_before', 'length_after',
                             'muon_entry_energy', 'muon_loss_energy',
                             'rel_muon_loss_energy', 'p_scattering_candidate'],
  'LabelsDeepLearning': ['p_outside_cascade', 'p_starting_300m',
                         'Length', 'LengthInDetector', 'p_entering'],
  'FilterMask': ['MuonFilter', 'CascadeFilter'],
  'weights': ['GaisserH4a_atmod12_SIBYLL',  # MuonGun
              'GaisserH4a_atmod12_DPMJET_C',  # MuonGun
              'GaisserH3aWeight',  # Corsika
              'GaisserH4aWeight',  # Corsika
              'honda2006_gaisserH4a_elbert_conv_NNFlux', # NuGen conv
              'honda2006_gaisserH3a_elbert_conv_NNFlux', # NuGen conv
              'aachen_flux_8yr', # NuGen astro
              'cscd_hans', # NuGen astro
              'mese_flux', # NuGen astro
              'hese_flux', # NuGen astro
              'hese6', # NuGen astro
              'sarcevic_std_gaisserH3a_elbert_prompt_NNFlux',  # NuGen prompt
              'sarcevic_std_gaisserH4a_elbert_prompt_NNFlux',  # NuGen prompt
             ]
}

# Define a fill value for key column pairs that do not exist.
# If key column pair does not exist in file and no fill value is provided,
# an error will be thrown.
'misc_fill_values': {
  'weights_GaisserH4a_atmod12_SIBYLL': 0.,  # MuonGun
  'weights_GaisserH4a_atmod12_DPMJET_C': 0.,  # MuonGun
  'weights_GaisserH3aWeight': 0.,  # Corsika
  'weights_GaisserH4aWeight': 0.,  # Corsika
  'weights_honda2006_gaisserH4a_elbert_conv_NNFlux': 0., # NuGen conv
  'weights_honda2006_gaisserH3a_elbert_conv_NNFlux': 0., # NuGen conv
  'weights_aachen_flux_8yr': 0., # NuGen astro
  'weights_cscd_hans': 0., # NuGen astro
  'weights_mese_flux': 0., # NuGen astro
  'weights_hese_flux': 0., # NuGen astro
  'weights_hese6': 0., # NuGen astro
  'weights_sarcevic_std_gaisserH3a_elbert_prompt_NNFlux': 0.,  # NuGen prompt
  'weights_sarcevic_std_gaisserH4a_elbert_prompt_NNFlux': 0.,  # NuGen prompt
}

# --------------
# Filter settings
# --------------
# The general_filter will filter events according to the key value pairs
# defined in the dicts filter_equal, filter_greater_than, filter_less_than
# The keys used here must exist in the loaded misc names.

# For events to pass filter, the following must be True: misc[key] == value
'filter_equal': {
  # 'FilterMask_MuonFilter': True,
}
# For events to pass filter, the following must be True: misc[key] > value
'filter_greater_than': {
}
# For events to pass filter, the following must be True: misc[key] < value
'filter_less_than': {
}

# ----------------
# Biased Selection
# ----------------
# Filter events based on the current reconstruction performance on these
# by defining key, value pairs and a biased fraction.
# Events will be put in queues, such that biased_fraction of all events
# passes one of the defined cuts.
# If apply_biased_selection is False, no biased selection will be performed.
'nn_biased_selection': {
    'apply_biased_selection': True,
    'reload_frequency': 100,
    'biased_fraction': 0.2,
    # Select biased event if: label[key] > value
    'label_greater': {
        'p_b300_a300_e10000_r_50':  0.5,
    },
    # Select biased event if: label[key] < value
    'label_less': {},
    # Select biased event if: label[key] == value
    'label_equal': {},
    # Select biased event if: label[key] != value
    'label_unequal': {},
    # Select biased event if: (true - pred)[key] > value
    'true_minus_pred_greater': {},
    # Select biased event if: (true - pred)[key] < value
    'true_minus_pred_less': {},
    # Select biased event if: transformed(true - pred)[key] > value
    'true_minus_pred_trafo_greater': {},
    # Select biased event if: transformed(true - pred)[key] > value
    'true_minus_pred_trafo_less': {},
    # Select biased event if: abs(true - pred)[key] >= value
    'cut_abs_diff': {},
    # Select biased event if: abs(transformed(true - pred))[key] >= value
    'cut_abs_diff_trafo': {},
    # Select biased event if: abs((true - pred) / unc)[key] >= value
    'cut_unc_weighted_diff_trafo': {},
}

# --------------
# Label settings
# --------------
# define selections for muon scattering
'labels_muon_scattering_defs': {
    'p_b300_a300_e10000_r_50': {
        'muon_entry_energy': 10000,
        'length_after': 300,
        'length_before': 300,
        'rel_muon_loss_energy': 0.5,
    },
    'p_b200_a200_e10000_r_50': {
        'muon_entry_energy': 10000,
        'length_after': 200,
        'length_before': 200,
        'rel_muon_loss_energy': 0.5,
    },
    'p_b200_a200_e1000_r_50': {
        'muon_entry_energy': 1000,
        'length_after': 200,
        'length_before': 200,
        'rel_muon_loss_energy': 0.5,
    },
    'p_b200_a200_e10000_r_30': {
        'muon_entry_energy': 1000,
        'length_after': 200,
        'length_before': 200,
        'rel_muon_loss_energy': 0.4,
    },
}

# initialize label weights with this value
'label_weight_initialization': 0.
# Weights of each label are initialized with label_weight_initialization,
# unless defined otherwise here
'label_weight_dict': {
    # 'length': 1,
    # 'length_before': 1,
    # 'length_after': 1,
    # 'muon_zenith': 1,
    # 'muon_azimuth': 1,
    # 'muon_energy': 1,
    # 'muon_entry_energy': 1,
    # 'muon_entry_x': 1,
    # 'muon_entry_y': 1,
    # 'muon_entry_z': 1,
    # 'muon_entry_time': 1,
    # 'muon_exit_energy': 1,
    # 'muon_exit_x': 1,
    # 'muon_exit_y': 1,
    # 'muon_exit_z': 1,
    # 'muon_exit_time': 1,
    # 'muon_loss_energy': 1,
    # 'muon_loss_x': 1,
    # 'muon_loss_y': 1,
    # 'muon_loss_z': 1,
    # 'muon_loss_time': 1,
    # 'rel_muon_loss_energy': 1,
    'p_scattering_candidate': 1,
    'p_b200_a200_e10000_r_50': 1,
    'p_b200_a200_e1000_r_50': 1,
    'p_b200_a200_e10000_r_30': 1,
    'p_b300_a300_e10000_r_50': 1,
}
# Keys to use for I3Particle
'label_particle_keys': {
  # 'energy': EnergyVisible,
  # 'time': VertexTime,
  # 'length': LengthInDetector,
  # 'dir_x': PrimaryDirectionX,
  # 'dir_y': PrimaryDirectionY,
  # 'dir_z': PrimaryDirectionZ,
  # 'pos_x': VertexX,
  # 'pos_y': VertexY,
  # 'pos_z': VertexZ,
}
# Update label weights during training
'label_update_weights': True
# Scale median absolute residuals for tukey loss
'label_scale_tukey': False
# Name of zenith direction label if it exists
'label_zenith_key': muon_zenith
# Name of azimuth direction label if it exists
'label_azimuth_key': muon_azimuth
# Name of direction vector x-component label if it exists
'label_dir_x_key':
# Name of direction vector x-component label if it exists
'label_dir_y_key':
# Name of direction vector x-component label if it exists
'label_dir_z_key':
# Add direction vector components as labels
'label_add_dir_vec': False
# Add position at the provided relative time (relative to time range start)
'label_position_at_rel_time':
# Define pid keys. The labels defined here will be forced to range [0, 1]
# (depends on the chosen neural network model)
'label_pid_keys': [
    'p_scattering_candidate',
    'p_b300_a300_e10000_r_50',
    'p_b200_a200_e10000_r_50',
    'p_b200_a200_e1000_r_50',
    'p_b200_a200_e10000_r_30',
]
# smooth pid labels as defined in 'label_pid_keys':
# new_labels = labels * (1 - label_smoothing) + label_smoothing / 2.
'label_pid_smooth_labels':

# ---------------------
# Event weight settings
# ---------------------
'event_weight_file': #'event_weights'
'event_weight_name': #'event_selection_weight'

# weights to accumulate for Corsika, NuGen, and MuonGun
'event_weights_corsika_keys': ['weights_GaisserH4aWeight']
'event_weights_muongun_keys': ['weights_GaisserH4a_atmod12_SIBYLL',
                               'weights_GaisserH4a_atmod12_DPMJET_C']
'event_weights_nugen_keys': ['weights_aachen_flux_8yr']
# Number of processed  runs/files in 'training_data_file' file list glob
# [used to get normalization of Corsika, MuonGun, and NuGen]
# Note: normalization here is not correct, just there to get intraclass weights
'event_weights_num_corsika_files': 32098  # ~ 32098 files
'event_weights_num_muongun_files': 174771 # ~ 174771 files
'event_weights_num_nugen_files': 176  # ~ 176000 files

#---------------------------
# General Training settings
#---------------------------
'num_training_iterations' : 100000000
'validation_frequency' : 100
'save_frequency' : 500
'keep_probability_list' : [0.95, 1.0, 1.0, 1.0]
# A custom evaluation method can be defined here.
# If defined, this method will be run during each validation step.
'evaluation_file': #default_evaluation
'evaluation_name': #eval_direction

#---------------------------
# Trafo settings
#---------------------------
'trafo_num_jobs' : 25
'trafo_num_batches' : 10000
'trafo_model_path' : '../data/trafo_models/dnn_reco_muon_scattering_01.npy'
'trafo_normalize_dom_data' : True
'trafo_normalize_label_data' : True
'trafo_normalize_misc_data' : False
'trafo_log_dom_bins' : [False, False, False, False, False, False, False, False, False]
'trafo_log_label_bins' : {
                            # 'muon_loss_energy',
                            # 'muon_entry_energy',
                            # 'muon_energy',
                         }
'trafo_log_misc_bins' : False
'trafo_treat_doms_equally' : True
'trafo_norm_constant' : 0.0001

#------------------
# NN Model Training
#------------------
'model_checkpoint_path' : "../checkpoints/nn_model/\
                              {model_file}__\
                              {model_name}/\
                              {unique_name}/model"
'model_restore_model' : True
'model_save_model' : True

# Define a dictionary of dictionaries of optimizers here.
# Each optimizer has to define the following fields:
#   'optimizer': name of tf.train.Optimizer, e.g. 'AdamOptimizer'
#   'optimizer_settings': a dictionary of settings for the optimizer
#   'vars': str or list of str specifying the variables the optimizer is
#           adujusting. E.g. ['unc', 'pred'] to optimize weights of the
#           main prediction network and the uncertainty subnetwork.
#   'loss_file': str or list of str, defines file of loss function
#   'loss_name': str or list of str, defines name of loss function
#                If loss_file and loss_name are lists, they must have the same
#                length. In this case, a sum of each loss will be performed
#   'l1_regularization': Regularization strength (lambda) for L1-Regularization
#   'l2_regularization': Regularization strength (lambda) for L2-Regularization
# This structure might seem a bit confusing, but it enables the use of
# different tensorflow optimizer operations, which can each apply to
# different weights of the network and wrt different loss functions.
'model_optimizer_dict': {

  # define an arbitrary name of optimizer here
  'simple_mse': {
                  'optimizer': 'AdamOptimizer',
                  'optimizer_settings': {'learning_rate': 0.001,},
                  'vars' : ['unc', 'pred'],
                  'loss_file': 'default_loss',
                  'loss_name': 'mse_and_cross_entropy',
                  'l1_regularization': 0.,
                  'l2_regularization': 0.,
                  'clip_gradients_value': ,
                  'remove_nan_gradients': False,
                },
  # 'gaussian_unc': {
  #                 'optimizer': 'AdamOptimizer',
  #                 'optimizer_settings': {'learning_rate': 0.000001,},
  #                 'vars' : ['unc'],
  #                 'loss_file': 'default_loss',
  #                 'loss_name': 'gaussian_likelihood',
  #                 'l1_regularization': 0.,
  #                 'l2_regularization': 0.00001,
  #                 'clip_gradients_value': ,
  #                 'remove_nan_gradients': False,
  #               },
}

#----------------------
# NN Model Architecture
#----------------------
'model_file' : 'general_IC86_models'
'model_name' : 'general_model_IC86_opt4'
'model_is_training' : True
'model_enforce_direction_norm': False

# 2D convolutional layer of upper DeepCore
'conv_upper_DeepCore_settings': {
    'filter_size_list': [[1, 9], [1, 9], [1, 9], [1, 7], [1, 7], [1, 7], [1, 5],
                         [1, 5], [1, 5], [1, 1], [1, 1]],
    'num_filters_list': [80, 80, 100, 100, 100, 100, 100, 100],
    'pooling_type_list': [False, False, 'max', False, False, 'max', False, False],
    'pooling_strides_list': [1, 1, 2, 1],
    'pooling_ksize_list': [1, 1, 2, 1],
    'use_dropout_list': True,
    'padding_list': 'SAME',
    'strides_list': [1, 1, 1, 1],
    'use_batch_normalisation_list': False,
    'activation_list': 'elu',
    'use_residual_list': True,
}

# 2D convolutional layer of lower DeepCore
'conv_lower_DeepCore_settings': {
    'filter_size_list': [[1, 9], [1, 9], [1, 9], [1, 9], [1, 9], [1, 9], [1, 9],
                         [1, 9], [1, 9], [1, 9], [1, 9], [1, 9], [1, 1], [1, 1]],
    'num_filters_list': [80, 80, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                         100, 100, 100],
    'pooling_type_list': [False, False, 'max',
                          False, False, 'max',
                          False, False, 'max',
                          False, False, 'max',
                          False, False],
    'pooling_strides_list': [1, 1, 2, 1],
    'pooling_ksize_list': [1, 1, 2, 1],
    'use_dropout_list': True,
    'padding_list': 'SAME',
    'strides_list': [1, 1, 1, 1],
    'use_batch_normalisation_list': False,
    'activation_list': 'elu',
    'use_residual_list': True,
}

# 3D hexagonal convolution over main IceCube array (IC78)
'conv_IC78_settings' : {
    'filter_size_list': [[3, 0, 7], [3, 0, 7], [3, 0, 7], [3, 0, 7], [2, 0, 17],
                         [3, 0, 7], [3, 0, 7], [2, 0, 17], [3, 0, 7], [2, 0, 5],
                         [2, 0, 5], [2, 0, 5], [2, 0, 5], [2, 0, 5], [2, 0, 5],
                         [2, 0, 5], [2, 0, 5], [2, 0, 5], [1, 0, 3], [1, 0, 1]],
    'num_filters_list': [10, 10, 20, 20, 20, 20, 20, 20, 80, 80, 80, 80, 80,
                         80, 100, 100, 100, 100, 100, 100],
    'pooling_type_list': [False, False, 'max', False, False, False, False,
                          False,'max', False, False, False, False, False, 'max',
                          False, False, 'max', False, False],
    'pooling_strides_list': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 2, 2, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 2, 2, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 2, 2, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],
    'pooling_ksize_list': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 2, 2, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 2, 2, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 2, 2, 2, 1],
                             [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],
    'use_dropout_list': True,
    'padding_list': 'SAME',
    'strides_list': [1, 1, 1, 1, 1],
    'use_batch_normalisation_list': False,
    'activation_list': 'elu',
    'use_residual_list': True,
    'hex_zero_out_list': False,
    'dilation_rate_list': ,
    'hex_num_rotations_list': 1,
}

# Fully connected layer settings (Combine results from convolutions)
'fc_settings': {
    'fc_sizes': [300, -1], # last one will be overwritten with num labels
    'use_dropout_list': [True, False],
    'activation_list': ['elu', ''],
    'use_batch_normalisation_list': False,
    'use_residual_list': [False, True],
    'max_out_size_list': ,
}

# Fully connected layer settings for uncertainty subnetwork
'fc_unc_settings': {
    'fc_sizes': [300, -1], # last one will be overwritten with num labels
    'use_dropout_list': [True, False],
    'activation_list': ['elu', 'abs'],
    'use_batch_normalisation_list': False,
    'use_residual_list': False,
    'max_out_size_list': ,
}

...
